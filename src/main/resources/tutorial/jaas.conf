/** Login Configuration for the JaasAcn and JaasAzn Applications
 **
 ** JAAS authentication is performed in a pluggable fashion,
 ** so applications can remain independent from underlying authentication technologies.
 ** A system administrator determines the authentication technologies, or LoginModules,
 ** to be used for each application and configures them in a login Configuration.
 ** The source of the configuration information (for example, a file or a database)
 ** is up to the current javax.security.auth.login.Configuration implementation.
 ** The default Configuration implementation from Sun Microsystems reads configuration information
 ** from configuration files, as described in com.sun.security.auth.login.ConfigFile.html.
 **
 ** A login configuration file consists of one or more entries,
 ** each specifying which underlying authentication technology should be used
 ** for a particular application or applications. The structure of each entry is the following:
 ** <entry name> {
 **   <LoginModule> <flag> <LoginModule options>;
 **   <LoginModule> <flag> <LoginModule options>;
 ** };
 **
 ** The Krb5LoginModule succeeds only if the name and password supplied by the user
 ** are successfully used to log the user into the Kerberos KDC.
 **
 ** "LoginModule" — specifies the fully qualified class name for a class that implements a particular authentication technology
 ** The class(es) must implement the javax.security.auth.spi.LoginModule interface
 **
 ** A typical LoginModule may prompt for and verify a user name and password.
 ** Any vendor can provide a LoginModule implementation that you can use.
 ** The Krb5LoginModule uses Kerberos as the underlying authentication technology.
 **
 ** "flag" — indicates whether success of the LoginModule is "required", "requisite", "sufficient", or "optional".
 **
 ** "LoginModule options" — space-separated list of values which are passed directly to the underlying LoginModule
 ** Options are defined by the LoginModule itself, and control the behavior within it.
 **
 ** The correct way to specify options in the configuration file
 ** is by using a name-value pairing, for example debug=true,
 ** where the option name (in this case, "debug") and value (in this case, "true")
 ** should be separated by an "equals" symbol.
 **
 ** The configuration file to be used can be specified in one of two ways:
 ** 1) "On the command line".
 **    You can use a "-Djava.security.auth.login.config" command line argument
 **    to specify the login configuration file that should be used:
 **        java -Djava.security.auth.login.config=/<path>/jaas.conf JaasAcn
 **
 ** 2) In the "Java security properties file".
 **    An alternate approach to specifying the location of the login configuration file
 **    is to indicate its URL as the value of a "login.config.url.n" property in the security properties file.
 **
 **    The security properties file is the "java.security" file located in the "lib/security" directory of the JRE.
 **    For "Java 8, and early version", we can find the java.security file at "$JAVA_HOME/jre/lib/security/java.security".
 **    For "Java 11 and newer version", we can find the java.security file at "$JAVA_HOME/conf/security".
 **
 **    Here, "n" indicates a consecutively-numbered integer starting with "1".
 **    Thus, if desired, you can specify more than one login configuration file by indicating:
 **    one file URL for the "login.config.url.1" property,
 **    a second file URL for the "login.config.url.2" property, and so on.
 **    If more than one login configuration file is specified (that is, if n > 1),
 **    then the files are read and concatenated into a single configuration.
 **
 **    Here is an example of what would need to be added to the security properties file
 **    in order to indicate the "jaas.conf" login configuration file used by this tutorial.
 **    This example assumes the file is in the "C:\AcnTest" directory on a Microsoft Windows system:
 **        login.config.url.1=file:C:/AcnTest/jaas.conf
 **    (Note that URLs "always use forward slashes", regardless of what operating system the user is running.)
 **/
JaasSample {
   com.sun.security.auth.module.Krb5LoginModule required;
};